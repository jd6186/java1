package com.lec.java.collection_review;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import org.xml.sax.HandlerBase;

public class Collection_Review_Main {
	public static void main(String[] args) {
//		문제. 제네릭클래스는 왜 정의를 하게 되는가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 해당 클래스 밑에 제네릭클래스를 정의하여라.
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 다른 클래스와 다르게 어떤 것을 통해 우엇을 정의하는가?
//		TODO
		
		
		
		
		
		
		
		
//		문제. 제네릭클래스 안에 이름과 나이를 출력하게 하는 메소드를 정의하라.
//		TODO
		
		
		
		
		
		
		
		
		
		
		
//		문제. 이름 정동욱 나이 26을 기존 클래스를 황요하는 방식으로 출력하라.
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 하지만 저 결과값을 얻는데는 du1.display(); 를 쓰는 방법이 있는ㄷ ㅔ왜 이렇게 출력하면 되지 뭐하러 제네릭클래스를 쓰는가?
//		TODO
		
		
		
		
		
		
		
//		문제. 그럼 소개한느 것을 제네릭클래스로 만들어보아라. 그리고 무슨 차이가 있는가?
//		TODO
		
		
		
		
		
		
//		문제. 이름 김경빈, 나이 26 이라는 김경빈 클래스를 만들고 위에 사용한 제네릭클래스를 활용해 출력해보라.
//		TODO
		

		
////////////////////////////////////////////////////////여기까지가  01/////////////////////////////////////////////////////////////		
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기부터  02/////////////////////////////////////////////////////////////	
		
		
		
//		문제. 제네릭클래스에서는 어떤 타입을 사용 할 수가 없는가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 그럼 무엇이 올 수 있는가?
//		TODO
		
		
		
		
		
		
		
		
		
		
//		문제. 다른 클래스를 만들지 말고 제네릭클래스 하나로 두가지 타입을 받아서 출력하게 만들어 보아라.
//		TODO
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  02/////////////////////////////////////////////////////////////	
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기부터  03/////////////////////////////////////////////////////////////	
		
		
//		문제. Collection클래스를 상속받는 대포적인 클래스 2개는?
//		TODO
		
		
		
		
		
		
		
		
//		문제. 두가지의 기능적 결정적 차이 2가지는?
//		TODO
		
		
		
		
		
		
		
		
//		문제. 두가지의 장점에 대표적인 것은 1개씩 각각 설명하라.
//		TODO
		
		
		
		
		
		
		
//		문제. List클래스를 상속받는 대표적 클래스 2개는
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 두가지의 장단점에 대해 설명해보라.
//		TODO 
		
		
		
		
		
		
		
		
		
//		문제. 위 2가지중 실무에서 무조건 이것만 써야되는 것은?
//		TODO
		
		
		
		
		
		
		
		
//		문제. 데이터를 관리할 때 필요한 4가지의 대표 앞글자 4개와 각 앞글자별로 어떤 기능을 하는지 설명하라.
//		TODO
		
		
		
		
		
		
		
		
		
		System.out.println();
//		문제. ArrayList로 회원 이름을 받는 리스트를 만들고 회원 5명을 받아라.
//		TODO
		
		
		
		
		
		
		
		
		System.out.println();
//		문제. 받은 리스트안에 존재하는 원소의 개수를 출력하라.
//		TODO
		
		
		
		
		
		
		
		
//		문제. 일반 for 구문을 활용해 해당 리스트 안에 있는 원소들을 한번에 출력하라.
//		TODO
		
		
		
		
		
		
		
		
		
		System.out.println();
//		문제. 3번째 원소 자리에 "결혼"을 넣어라. 이 후  enhanced for을 이용하여 리스트를 출력하라.
//		TODO
		
		
		
		
		
		
		
		
		
		
		System.out.println();
//		문제. 5번째 인덱스 지우고 이터레이터로 출력 (이 때 이터레이터는 뭐로 임포트 시켜야되는가?)
//		TODO
		
		
		
////////////////////////////////////////////////////////여기까지가  03/////////////////////////////////////////////////////////////	
		
		
		
		
		
		
////////////////////////////////////////////////////////여기부터  05/////////////////////////////////////////////////////////////	
		System.out.println();
//		문제. 
		// Student 타입을 담는 ArrayList를 만드고
		// 3개의 Student 데이터 을 입력받아서
		// 3가지 방법으로 출력해보세요. 
		// for, Enhanced-for, Iterator
//		TODO
		
		
		
		
		
		
		
		
//		문제. 위 처럼 출력이 가능한 이유가 무엇인가? (2가지)
//		TODO
		
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  05/////////////////////////////////////////////////////////////	
		
		
		
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기부터  06/////////////////////////////////////////////////////////////	
		
//		문제. 
		// MemberModel1을 저장할 수 있는 ArrayList 인스턴스 생성
		// 5개이상 add
		// 수정, 삭제 등 저장된 자료를 변경해보기
		
		// 출력방법 3가지로 출력
//		TODO
		
		
		
		
		
		
//		문제. 05에서 만든 것과 어떤 차이가 있는가?
//		TODO
		
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  06/////////////////////////////////////////////////////////////	
		
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기부터  08/////////////////////////////////////////////////////////////	
		
//		문제. Set의 종류에는 어떤 것들이 있는가?
//		TODO
		
		
		
		
		
//		문제. 각각의 장점에 대해 설명하라
//		TODO
		
		
		
		
		
		
		
		
//		문제. Set에서는 List와 다르게 어떤 것을 이용한 출력문을 활용할 수 없는가? 이유는 무엇인가?
//		TODO
		
		
		
		
		
		
		
//		문제. set에 장점이자 단점은 무엇인가? 그리고 그 이유는 무엇인가?
//		TODO
		
		
		
		
		
		
		
//		문제. Integer 타입을 저장할 수 있는 HashSet 인스턴스 생성
		System.out.println();
//		TODO
		
		
		
		
		
		
		
//		문제. 위에 HashSet은 어떤 것으로 임포트 시켜야 하는가??
//		TODO
		
		
		
		
		
		
		
		
//		문제. iterator로 값을 불러올 때 단점은 무엇인가?
//		TODO
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  08/////////////////////////////////////////////////////////////	
		
		
		
		
////////////////////////////////////////////////////////여기부터  10/////////////////////////////////////////////////////////////	
		
//		문제. 앵클 브레킷에 일반 클래스를 넣는 것과 레퍼클래스를 담는 것에 차이가 무엇인가? 
//		TODO
		
		
		
		
		
		
		
		
//		문제. 그럼 그런 차이르 없에기 위해선 어떻게 헤쉬코드를 통제해야 하는가?
//		TODO
		
		
		
		
		
		
		
		
		
		
//		문제. 위 내용을 활용해 Integer타입을 받는 hashSet을 만들고 MyClass를 받는 해쉬셋을 각각 만들어서 중복이 둘다 안된다는 것을 증명하라.
//		TODO
		
		
		
		
		
		
		
//		문제. hashCode를 오버라이딩 시킬 때 어떤 값이 리턴되게 만들어야 되는가?
//		TODO
		
		
		
		
		
		
		
		
		
		
//		문제. equals()를 오버라이딩 시킬 때 순서는 어떻게 되는가?
//		TODO
		
		
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  10/////////////////////////////////////////////////////////////		
		
////////////////////////////////////////////////////////여기부터  11/////////////////////////////////////////////////////////////	
		
//		문제. Set에 속하는 자손 클래스에는 무엇이 있는가?
//		TODO
		
		
		
		
		
		
		
		
//		문제. 그럼 TreeSet은 무엇을 상속 받기 때문에 기본적으로 어떤 성격이겠는가?
//		TODO
		
		
		
		
		
		
		
		
//		문제. TreeSet을 만들고 안에 값을 입력, 출력해보아라 (2가지 방식)
//		TODO
		
		
		
		
		
		
		
		System.out.println();
//		문제. 출력할 때 오름차순이 아닌 내림차순으로 출력되게 만들어 보아라.
//		TODO
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  11/////////////////////////////////////////////////////////////		
		
		
////////////////////////////////////////////////////////여기부터  13/////////////////////////////////////////////////////////////	
		System.out.println();
		System.out.println("여기서부터 Map");
//		문제. Map이란 무엇인가?
//		TODO
		
		
		
		
		
		
		

//		문제. Map은 앞에 Set과 List처럼 Collection을 상속받는가?
//		TODO
		
		
		
		
		
		
		
		
//		문제. Map을 상속받는 자료구조는 무엇이 있는가?
//		TODO
		
		
		
		
		
		
		
		
//		문제. 둘의 차이점은 무엇인가?
//		TODO
		
		
		
		
		
		
//		문제. 공통점은 무엇인가?
//		TODO
		
		
		
		
		
		
//		문제.
		// HashMap 인스턴스 생성
		// Key - Integer 타입
		// Value - String 타입
//		TODO
		
		
		
		
		
		
		
//		문제. 3개의 데이터 값을 입력해 출력하고 Set과 List와 다른 Map만의 입력방식에 대해 설명하라.
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. Iterator를 활용한 데이터 출력을 시도할 때 순서에 대해서 설명하라.
//		TODO
		
		
		
		
		
		
		
		
		System.out.println();
//		문제. enhanced for로 출력해봐라.
//		TODO
		
		
		
		
		
		
		
		System.out.println();
//		문제. 다른 방식으로도 출력해봐라.
//		TODO
		
		
		
		
		
		
		System.out.println();
//		문제. 
		// 발생 빈도 맞추기.
		// 도전과제
		// arr[] = {2, 4, 5, 4, 3, 3, 4}
		// 주어진 배열이 위와 같을때 다음과 같이 발생회수 나타내기 
		// 2 : 1개 
		// 3 : 2개 
		// 4 : 3개 
		// 5 : 1개
//		TODO
		
		
		
		
		
//		문제. 위에 결과가 출력될 수 있는 기능이 작동되는 원리는 무엇인가요?
//		TODO
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  13/////////////////////////////////////////////////////////////		
		
////////////////////////////////////////////////////////여기부터  14/////////////////////////////////////////////////////////////	
		
//		문제. TreeMap타입은 어떤 것에 특화되어 있는가?
//		TODO
		
		
		
		
		
		
		
		
		
		
		
		
//		문제. TreeMap을 만들어보아라.(원소 5개)
//		TODO

		
		
		
		
		
		
		
		
		
//		문제. Iterator와 Map.Entry를 통해 출력해보라.
//		TODO

		
		
		
		
		
		
		
		
		
		
//		문제. 지정된 value값들만 출력해보아라 2가지 방식
//		TODO

		
		
		
		
		
		
		
		
		
//		문제. HashMap을 TreeMap으로 전환해 출력해보라.
//		TODO

		
		
		
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  14/////////////////////////////////////////////////////////////		
		
////////////////////////////////////////////////////////여기부터  16/////////////////////////////////////////////////////////////	
		
//		문제. 리스트들을 오름차순으로 배열하는 예약어는?
//		TODO

		
		
		
		
		
		
		
//		문제. 위에 처럼 정렬하여 출력해라(Date클래스 사용하여 날짜) 
//		TODO
		
		
		
		
		
		
		
		
//		문제. Comparable은 무엇인가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. Comparable은 어디서 어떤것을 함으로써 구현할 수 있는가?
//		TODO
		
		
		
		
		
		
		
		
//		문제. Comparable의 작동원리는 무엇인가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. Comparable을 구현해야 하는 상황의 종류에는 어떤 것들이 있는가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. sort를 적용하여 이 클래스 밑에 Student클래스를 만들어서(이름과 성적이 도출되는 클래스) comparable을 적용해보아라.(Student 클래스 안에)
//		성적을 토대로 sort시켜라
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 위에 오름차순으로 정렬된 것을 내림차순으로 정렬해보아라. (2가지 방법)
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. Comparator<>는 언제 적용하는가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. Comparator<>를 활용해 이번엔 이름순으로 정렬되게 sort시켜보아라.
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 위에 오름차순으로 정렬된 것을 내림차순으로 정렬시켜 보아라.
//		TODO
		
		
		
		
		
		
		
		
		
		
//		문제. 리스트 내부에 있는 값들을 임으로 섞어서 출력하는 것의 예약어이름은 무엇인가??
//		TODO
		
		
		
		
		
		
		
		
		
		
//		문제. 위에 내용을 활용하여 리스트를 새로 만들고 원소를 섞어서 3번 출력해보고 값이 변하는 것을 보아라.
//		TODO
		
		
		
		
		
		
		
		
		
		
		
//		문제. 위 리스트안에 제일 큰값과 제일 작은 값을 출력하는 기능을 활용해 출력해라.
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 위 리스트와 원소 개수가 동일한 새로운 리스트를 만들고 그 리스트 안에 위에 리스크 구문을 복사해 넣어라.
//		이 리스트에 add를 할 때 각각 새로운 학생들 4명을 생성해 넣어라.(모르겠으면 Collection16 165번째 행 참조) 
//		TODO
		
		
		
		
		
		
		
		
		
//		문제. 만약 뒤에 만든 리스트의 원소가 앞에 만든 리스트의 원소보다 적거나 많을 때 어떤 문제가 생기는지 작성하라.
//		TODO
		
		


		
		
		
		
		
		
////////////////////////////////////////////////////////여기까지가  16/////////////////////////////////////////////////////////////		
		
		
		
	} // end main
	
	
	
	
} // end class

