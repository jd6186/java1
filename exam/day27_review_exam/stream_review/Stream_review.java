package com.lec.java.stream_review;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Scanner;

public class Stream_review {
	public static void main(String[] args) {
		
//		문제  컴퓨터에 데이터를 인풋시켜주는 매체의 예를 들고 어떤 값으로 들어오게 되는지 설명하라.
//		TODO
//		키보드 마우스 등 바이너리진수로 1바이트씩 들어오게된다.
		
		
		
		
		
		
		
//		문제  컴퓨터에서 데이터를 아웃풋 시키는 매체의 예를 들고 어떤 값으로 나가게 되는지 설명하라.
//		TODO
//		파일, 프린터 모니터 등 위와 마찬가지로 바이너리진수로 1바이트씩 내보내게 된다.
		
		
		
		
		
		
		
		
//		문제  Java Stream의 흐름은 어떻게 돌아가는가?(input과 output을 나눠서 설명)
//		TODO
//		input단계에서는 소스에서 inputStream을 거쳐 프로그램으로 이동하고
//		output은 역순으로 진행될 때 outputStream을 거쳐 데스티네이션으로 가게된다.
		
		
		
		
		
		
		
		
//		문제  java.io의 주요 클래스들을 설명하라.(크게 4종류)
//		TODO
//		바이트 단위 입출력(inputStream, outputStream), 캐릭터단위 입출력(Reader, Writer), io.File(파일 정보 불러오기), io.Console(콘솔로부터 문자를 입출력하기 위한 클래스)
		
		
		
		
		
		
		
		
//		문제  InputStream 객체 in을 가지고 읽어들일 수 있는 스캐너 객체 생성
//		TODO
		Scanner sc = new Scanner(System.in);
		
		
		
		
		
		
		
		
		
//		문제  외부장치(콘솔, 키보드)로부터 데이터를 읽는 것을 가능하게 하는 예약어
//		TODO
//		FileInputStream
		
		
		
		
		
//		문제  System.out.println(); 에서 out은 무엇을 상속 받는가?
//		TODO
//		OutputStream
		
		
		
		
		
		
		
		
//		문제  Scanner sc = new Scanner(System.in); 에서 in은 무엇을 상속받는가?
//		TODO
//		InputStream
		
		
		
		
		
		
		
		
//		문제  콘솔로부터 문자을 입출력하기 위한 클래스의 종류에는 무엇이 있는가? 그리고 왜 사용하는가?
//		TODO
//		스캐너 객체가 있고 사용자가 그 값을 따로 입력해 프로그램을 사용할 수 있게 만들어준다.

		
		
		
		
		
		
	/////////////////////////////////////////////////////////////////여기까지가 01/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 02/////////////////////////////////////////////////////////////
		
//		문제  InputStream과 OutputStream을 상속받는 객체들에 대해 나열하라.
//		TODO
//		FileInputStream
//		FileOutputStream
		
		
		
		
		
		
		
		
		
		
		
//		문제  위 객체들은 각각 어떤 역할을 하는가?
//		TODO
//		파일로부터 데이터를 읽어내고 파일로 데이터를 써내보내는 역할을 함 
		
		
		
		
		
		
		
		
		
		
//		문제  InputStream과 OutputStream은 기본적으로 어느 블럭안에 있어야 하는가?
//		TODO
//		try-catch블록
		
		
		
		
		
		
		
		
		
		
//		문제   InputStream과 OutputStream은 "______" 이기 때문에 프로그램 종료전 반드시  "______" 해주어야 한다. (빈칸에 들어갈 말은)
//		TODO
//		자원이기 때문에 자원반납을 해줘야된다.
		
		
		
		
		
		
		
		
		
//		문제   그럼 위 내용은 어느 블럭 안에 작성을 해야 하는가? 그리고 왜 거기에 해야 하는가?(정확하게 기술해라 어디 안에 어디에 위치하는지)
//		TODO
//		finally블록 안에 try-catch로 잡아서 작업해줘야한다.
//		finally안에 해주는 이유는 try-catch구문에서 익셉션이 발생해도 반드시 실행되기 때문이다.
		
		
		
		
		
		
		
		
		
//		문제  그 블럭안에 작성하게 되면 반드시 반납전에 if구문을 써줘야한다. 조건값에는 무엇이 들어가야되고 왜 들어가야 되는가?
//		TODO
//		if구문을 통해 null값이 아닐 때만 반납이 되게 해야된다. 이유는? .close(); 가 뒤에 붙는데 값이 null값이면 바로 널포인트익셉션이 떠버린다. 그래서 if로 null이 아닐 때만 작동하게 해야된다.
		
		
		
		
		
		
		
		
		
		
//		문제  패키지를 만들고 temp 패키지에 big어쩌구 텍스트문서를 input한 다음 그 값을 읽어드리고 다시 그 똑같은 내용물의 것을 이름을 바꾸어서 외부로 내보내봐라.
//		이 때 현재 시간 저장하는 예약어를 이용해 시작부분과 끝부분에 넣어 그 차이 값이 얼마인지 구하여라(즉, 프로그램이 최종 종료되는데 까지 걸린 시간)
//		TODO
		InputStream is = null;
		OutputStream os = null;
		
		try {
			int byteCopied = 0;
			int byteRead = 0;
			is = new FileInputStream("temp/big_text.txt");
			os = new FileOutputStream("new_file.txt");
			long startLapTime = System.currentTimeMillis(); // laptime 제는거
			while(true) {
				// 읽어들이기
				byteRead = is.read();
				if(byteRead == -1) break;
				
				// 내보내기
				os.write(byteRead);
				byteCopied++;
			}		
			long endLapTime = System.currentTimeMillis(); // laptime 제는거
			long elapsedTime = endLapTime - startLapTime;

			System.out.println("읽고 쓴 바이트 : " + byteCopied);
			System.out.println("총시간 : " + elapsedTime);
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if(os != null) os.close(); 
				if(is != null) is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		
		
		
//		문제  read()는 무엇으로 부터 얼마만큼을 읽어서 어느정도의 단위에 담아 리턴을 해주는 예약어인가? 그리고 들어오는 값과 나가는 값의 단위의 차이가 있다면 왜 그런 차이가 발생하는가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제  최종적으로 읽고 쓴 바이트의 양을 구하여라.
//		TODO
		
		
		
		
		
		
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 02/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 03/////////////////////////////////////////////////////////////
		
//		문제   FileInputStream은 데이터를 한번에 몇바이트씩 읽어나가는가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제   그럼 시간효율을 봤을 때 몇 바이트씩 읽어나가는게 유리한가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제   그럼 읽고 출력하는 바이트 단위를 수정하는 방식에는 몇가지가 있는가?
//		TODO
		
		
		
		
		
		
		
		
		
//		문제   try with resource는 어떤 장점을 가지고 있으며 사용하는 방법은 무엇이며 기존 try-catch 구문과의 차이점은 무엇인가? 
//		그리고 이것을 쓰면 무엇을 안써도 되는가?
//		TODO
		
		
		
		
		
		
		
		
		
		
//		문제  try with resource는 java 몇 버전 부터 생겨난 것인가?
//		TODO
		
		


		
		
		
		
//		문제    InputStream, OutputStream 둘다 어떤 것을 기본적으로 상속(implements)하는가?
//		TODO
		
		
		
		
		
		
		
		
//		문제   버퍼를 이용해 입출력 데이터 값을 확장시킬 수 있는 2가지 방식을 기술하라.(집하장과 대형트럭에 비유하면 쉬움)
		
//		1) 데이터 운반의 집하장을 만들어주는 개념(팁을 주자면 팩을 꽂아서 쓰는것들 중 하나야)(File04의 개념인데 한번에 정리를 해야되서 여기서 문제냄)
//		TODO
		
		
		
		
		
		
//		2) 데이터 운반 시 대형 트럭을 이용하는 개념
//		여기서 중요한건 어떤것을 만들어야하고 그 만든 값이 어디에 들어가야 하는지가 중요
//		TODO
		
		
		
		
		
		
		
//		문제  위에서 활용한 두 개념은 서로 중복 적용이 가능한가? 
//		TODO
		
		
		
		
		
		
		
//		문제   read()와 write()의 ()에는 각각 어떤 내용이 들어가게 되는가? 그리고 아무것도 작성하지 않는다면 기본값이 어떻게 되는가?
//		TODO
		
		
		
		
		
		
		
		
//		문제   System.currentTimeMillis(); 로 측정하는 시간의 단위는 무엇인가?
//		TODO
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 03/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 04/////////////////////////////////////////////////////////////
		
//		문제   InputStream에서 상속되어져 내려가는 계보도를 그려라. 누가 누구를 상속받는지 마지막 BufferedInputStream까지 
//		TODO
		
		
		
		
		
//		문제   보조 스트림을 무엇이라고 부르는지 작성하고 어떤 기능을 하는지 써라.
//		TODO
		
		
		
		
		
//		문제   보조 스트림들은 어디에 명시해주는가?
//		TODO
		
		
		
		
		
//		문제   보조 스트림들은 어디에 인스턴스시켜주는가?
//		TODO
		
		
		
		
		
//		문제   BufferedInputStream과 BufferedOutputStream의 자원반납시 어떤 것도 같이 반납되는가?
//		TODO
		
		
		
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 04/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 05/////////////////////////////////////////////////////////////
		
//		문제    03번에서 푼 문제를 Buffered와 Buff를 합쳐서 더 빠른 속도로 출력해보라.
//		TODO
		
		
		
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 05/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 06/////////////////////////////////////////////////////////////
		
//		문제   자바의 기본 데이터 타입(프리미티브타입)을 그대로 읽어들어 오고 자바타입 그대로 출력하는 필터스트림은 무엇인가?
//		TODO
		
		
		
		
//		문제   그럼 프리미티브타입이면 아무거나 다 가능한가?
//		TODO
		
		
		
		
		
//		문제   원하는 타입으로 output을 해서 temp패키지 안에 txt파일을 하나 만들고 거기에 30byte에 해당하는 값을 넣어봐라. 
//		TODO
		
		
		
		
		
//		문제   넣었으면 이제 해당 문자들을 다시 자바로 불러들여와봐라.
//		TODO
		
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 06/////////////////////////////////////////////////////////////
		
		
		
		/////////////////////////////////////////////////////////////////여기부터 08/////////////////////////////////////////////////////////////
		
//		문제   자바 객체(Class)를 파일로 읽고 써내는 filterStream은?
//		TODO
		
		
		
		
		
		
//		문제   이 filterStream은 반드시 어떤 것을 구현해야하는가?
//		TODO
		
		
		
		
		
		
		
//		문제   클래스의 일부 변수를 직렬화에서 제외시키기 위한 예약어는 무엇이며 어디에 붙어야되는가?
//		TODO
		
		
		
		
		
		
//		문제   파일에서 object는 방법(2가지)를 설명하고 각각을 활용해 파일을 읽어라.
//		TODO
		
		
		
		
		
		
		
//		문제   직렬화의 대상이 되는 클래스는 반드시 어떤 것을 상속시켜야되는가?
//		TODO
		
		
		
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 08/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 09/////////////////////////////////////////////////////////////
		
//		문제    ArrayList<> 와 같은 Collection 에서, 모든 데이터들이 Serializable 되어 있으면  ObjectInputStream/ObjectOutputStream 으로 read/write 가능하다 
//		클래스를 타입으로 가지는 ArrayList<> 구문을 만들고 사람의 이름과 나이를 출력할 수 있는 'MemberClass'러눈 것을 만들어 넣어라. 이후 리스트에 클래스를 인스턴스시켜서 넣고 이 리스트 자체를 입력및 출력하는 작업을 해줘라.(파일로 출력을 먼저해줘야겠지?)
//		TODO
		
		
		
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 09/////////////////////////////////////////////////////////////
		
		
		
		
		/////////////////////////////////////////////////////////////////여기부터 11/////////////////////////////////////////////////////////////
		
//		문제     '텍스트파일, 즉 문자 단위' 데이터를 읽고/쓰기 할때 사용하는 filterStream은 무엇인가?
//		TODO
		
		
		
		
		
		
//		문제   이것은 무엇을 상속받는가?
//		TODO
		
		
		
		
		
		
//		문제   바이너리 파일을 출력할 때와 문자를 출력할 때의 차이점은 무엇인가?
//		TODO
		
		
		
		
		
		
//		문제    UTF-8과 영어 알파벳의 바이트수는 각각 몇바이트로 취급되는가?
//		TODO
		
		
		
		
		
//		문제   메소드 호출한 후에, 출력버퍼에 남아있는 데이터 완전히 출력해주는 예약어는 무엇인가?
//		TODO
		
		
		
		
		
//		문제    한글자씩 읽다가 더 이상 읽을 문자가 없으면 어떤 값을 리턴해주는가?
//		TODO
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 11/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 12/////////////////////////////////////////////////////////////
		

//		문제   시스템 정보에 접근하기 위해 사용해야되는 객체의 이름은?
//		TODO
		
		
//		문제    시스템 정보 확인을 위한 객체들은 어떤 것이 있는가? (총 8가지) 
//		1) 내 컴퓨터 오퍼레이팅 시스템이 무엇인지 알려주는 예약어
//		2) ADM버전을 보여주는 것은 무엇인가?
//		3) window버전을 보여주는 것은 무엇인가?
//		4) 자바가 깔린 위치를 알려주는 것은 무엇인가?
//		5) 자바 버전을 보여주는 것은 무엇인가?
//		6) 현재 실행중인 프로그램의 위치를 알려준느 것은?
//		7) 지금 실행중인 내 문서가 들어있는 폴더의 이름
//		8) \를 표현해주는 것은?? (파일들을 구분할 때 사용되는게 팁이다.)
//		TODO
		
		
		
		
		
		
//		문제   jre와 jdk에 대해 설명하라.
//		TODO
		
		
		
		
		
//		문제   현재 실행중인 프로그램의 위치를 무엇이라고 부르는가?
//		TODO
		
		
		
		
		
//		문제   내 문서가 있는 폴더를 무엇이라고 부르는가?
//		TODO
		
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 12/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 13/////////////////////////////////////////////////////////////
		
//		문제   디렉토리와 파일의 차이점이 무엇인가?
//		TODO
		
		
		
		
		
//		문제   디렉토리 정보를 출력할 때 사용하는 것은 무엇인가?(어디안에 정보를 넣어서 출력하는가?)
//		TODO
		
		
		
		
//		문제   디렉토리 안에 있는 파일들을 배열안에 넣는과정에서 사용되는 2가지 구문은 무엇인가?(크게 봤을 때)
//		TODO
		
		
		
		
		
//		문제   현재 작업 중인 디렉토리에 대한 정보를 불러올 땐 어떤 예약어를 사용해야되는가? 또 어떤 타입으로 받아줘야 하는가?
//		TODO
		
		
		
		
		
//		문제   파일 이름과 크기를 알려주는 객체는 각각 무엇인가?
//		TODO
		
		
		
		
//		문제   현재작업폴더에 있는 디렉토리와 파일들을 담아서 타입, 이름, 파일 용량이 나오게 출력하라. 
//		TODO
		
		
		
		
		
//		문제   위 작업시 파일을 최초 인스턴스 시키면 이것은 실존하는 파일을 가져오는 것인가?
//		TODO
		
		
		
		
		
//		문제  아니라면 어떤 작업만을 하고 있는 것인가?
//		TODO
		
		
		
		
		
		
//		문제    파일 하나에 대한 정보를 출력할 때 (이름, 절대경로, 실존여부)를 확인하는 객체를 각각 나열하여라.
//		TODO
		
		
		
		
//		문제   위에서 만든 파일의 이름, 절대경로, 실존여부를 체크해 출력해라.
//		TODO
		
		
//		문제    파일 정보를 읽어들어올 때 따로 디렉토리를 지정해주지 않고 파일 이름만 작성하면 어디 디렉토리에서 해당 파일을 가져오는가?
//		TODO
		
		
		/////////////////////////////////////////////////////////////////여기까지가 13/////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////여기부터 14/////////////////////////////////////////////////////////////
		
//		문제   파일생성 전에 무엇을 생성해야 되는가?
//		TODO
//		문제   폴더 생성을 할 때 사용하는 약자가 무엇인가?
//		TODO
//		문제  File.separator는 어떤 것과 같은의미를 지니는가?
//		TODO
//		문제  separator는 무엇을 의미하는가?
//		TODO
//		문제   하나의 파일을 생성하고 이름을 바꾸고 삭제를 하는 일련적인 과정을 작성하라
//		TODO
//		문제   이름을 변경하는 것과 같은 작동을 하는 것은 무엇인가?
//		TODO
//		문제	File f = new File(path); 이렇게 인스턴스 된 순간 새로운 파일이 생기는가?
//		TODO
//		문제   만들거나 이름을 변경하거나 삭제하거나 어떤 것을 준비해둬야 하는가?
//		TODO
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 14/////////////////////////////////////////////////////////////
		
		
		/////////////////////////////////////////////////////////////////여기부터가 15/////////////////////////////////////////////////////////////
		
		
		
		
		
		
		
		
		
		/////////////////////////////////////////////////////////////////여기까지가 15/////////////////////////////////////////////////////////////

		
		
		
		
		
		
		
		
	} // end main
} // end class
