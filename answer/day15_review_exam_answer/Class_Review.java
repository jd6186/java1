package com.lec.java.class_review;

public class Class_Review {
	public static void main(String[] args) {
		System.out.println(" Class Review 시작합니다.");
		
//		문제 1. 클래스란 무엇이며(오브젝트부터 인스턴스까지 이어지는 과정에 대한 설명 필수 모르면 드라이브 내 15_1ppt 참조!)
//		TODO
//		현실속의 물체를 오브젝트로하여 그 특성과 기능을 정의해 놓은 것이 클래스다.
//		이 후 정의한 특성과 기능이 구동되게 만드는게 인스턴스다.
		
//		문제 2. 클래스에서 지정하는 변수는 지역변수인가 매개변수인가?
//		TODO
//		지역변수

		
		
		
//		문제 3. 생성자는 어떤 역할을 하는가?
//		TODO
//		맴버 변수를 초기화 해준다.
		
		
		
//		문제 4. 지역변수는 사용전 반드시 무엇을 해주어야 하는가?
//		TODO
//		초기화를 해줘야 한다.
		
		
		
		
		
//		문제 5. 클래스 내에서 클래스가 가지는 고유 특성을 정의한 변수를 무엇이라 하는가?
//		TODO
//		맴버변수
		
		
		
		
		
		
//		문제 6. TV라는 새로운 클래스를 만들고 해당 클래스가 가지는 특성과 기능을 정의하라
//		[기능은 특성을 반영하여 제작되는게 원칙이다. 즉, 볼룸이라는 특성이 있으면 볼륨업, 볼륨다운이 있다.]
//		TODO
		
		
		
		
		
		
		
//		문제 7. 만든 클래스를 메인으로 가지고 오는 구문을 작성하시오 (그리고 구성요소를 설명하시오 구문에 사용된 것은 어떤건지 어떤 기능을 하는지)
//		TODO
		tv tv1 = new tv();
		tv1.powerOnOff();
		tv1.channelUp();
		tv1.channelUp();
		tv1.channelUp();
		tv1.volumUp();
		tv1.displayPannel();
		
		
		
		
		
//		문제 8. 클래스내에 해당 클래스의 전반적인 상태를 볼 수 있는 메소드를 만들어라.
//		TODO
//		위에 만들었다.
		
		
		
		
		
		
//		문제 13. 조정된 현재 클래스 상태를 호출하라.
//		TODO
//		위에 호출함
		
		
		
		
//		문제 14. 클래스에서 정의한 메소드들에는 기존 메소드와 다르게 이것이 빠져있다. 이건 무엇일까?
//		TODO
//		스테틱
		
		
		
/////////////////////////////////////////////////여기까지가 class 01/////////////////////////////////////////////////////////////		
		
		
		
		
		
		
/////////////////////////////////////////////////여기부터가 class 02/////////////////////////////////////////////////////////////		
		
//		문제 16. 생성자란 무엇이며 디폴트 생성자와 매개변수 생성자의 차이점에 대해 설명하라.
//		TODO
//		생성자란 맴버변수를 초기화 시키는 것을 의미한다.
		
		
//		문제 17. 생성자는 무엇을 가지고 있지 않은가?
//		TODO
//		리턴문
		
		
//		문제 18. 생성자는 무엇을 가질 수 있고 어떤것이 가능한가? 그리고 가질 수 있는 것의 뜻에 대해 다시한번 설명하라.
//		TODO
//		디폴트 생성자와 매개변수 생성자 
//		디폴트 생성자는 매개변수를 아예가지지  않는 것으로 아무것도 작성하지 않으면 디폴트생성자가 자동으로 설정된다.
		
		
//		문제 19. 클래스 내에서 생성자를 따로 지정하지 않으면 어떤 생성자가 자동으로 생성되는가? (그럼 안해도 되는건가?)
//		TODO
//		디폴트
		
		
		
//		문제 20. Circle c1 = new Circle(3); 중 어느것이 생성자인가?
//		TODO
//		new뒤에 내용이 생성자고 앞에 Circle은 클래스를 불러온거고 뒤에 c1는 메인에서 사용한 변수의 이름을 정해준 것이다.
		
		
//		문제 21. Circle이라는 클래스를 만들고 해당 클레스안에 디폴트 생성자와 매개변수가 있는 생성자를 만들어라  그리고 기능으로 둘레길이와 넓이를 구하는 기능을 넣어라.
//		TODO
		
		
		
		
//		문제 22. 위에서 만든 클레스를 불러오고 반지름이 6일 때 넓이값과 둘레값을 산출하라.
//		TODO
		Circle c1 = new Circle();
		double area = c1.circleArea(6);
		System.out.printf("원의 넓이는 = %.1f\n", area);
		double primeter = c1.circlePrimeter(6);
		System.out.printf("원의 둘레는 = %.1f\n", primeter);
		
		System.out.println();
//		문제 23. 같은 방식으로 Rectangle 클래스를 만드는데 이번엔 멤버변수를 프라이빗으로 만들어라.
//		이 후 가로 6, 세로 10인 직사각형의 넓이와 둘레값을 산출하여라.
//		(멤버변수 잘 못잡으면 바보되니까 모르겠으면 바로 class02  Rectangle열어서 봐라.)
//		TODO
		Rectangle rec = new Rectangle();
		double primeter1 = rec.rectanglePrimeter(6, 10);
		System.out.printf("직사각형의 둘레는 = %.1f\n", primeter);
		double area1 = rec.rectangleArea(6, 10);
		System.out.printf("직사각형의 넓이는 = %.1f\n", area);
		
		System.out.println();		
		
		
		
//		문제 24. public과 private의 차이점에 대해 설명하라.
//		TODO
//		해당 클래스에서만 변경이 허용되게 할 것인가 아니면 다른 클래스에서도 해당 클래스의 변수를 변환할 수 있게 허락할 것인가의 차이다.
		
		
		
		
//		문제 25. 다시한번 클래스의 구성요소에 대해 설명하라. 위에부터 아래 순으로 (3 부분으로 나눠서)
//		TODO
//		멤버변수  생성자  메소드
		
		
		
		
		
		
//		문제 26. 멤버 변수와 생성자는 메소드인가? 아니라면 왜 아닌가?
//		TODO
//		메소드는 틀이 정확하게 정해져있다.
//		수식어 리턴문 매개변수 
//		하지만 나머지 것들은 들어갈 때도 안들어 갈 때도 있다.
		
		
		
		
		
		
/////////////////////////////////////////////////여기까지가 class 02/////////////////////////////////////////////////////////////		
		
		
		
		
/////////////////////////////////////////////////여기부터가 class 03/////////////////////////////////////////////////////////////		
		
//		문제 27. 캡슐화, 은닉화, 추상화가 무엇인가?
//		TODO
//		private를 선언해줌으로서 다른 클래스들에서는 접근이 불가능하게 만드는 것이다.
//		이 때 다른 클래스로 메소드가 불려가서 값을 보여주기는 하지만 그게 메소드가 어떻게 구성됐는지 멤버변수값은 얼만지를 보여줄 수 는 없다.
		
		
//		문제 28. 그럼 캡슐화된 클래스의 값에는 접근할 수 없는 것인가? 
//		Number 클래스를 만들고 private 멤버변수를 만들어 설명하라.(각 단계별로 정확하게 만들어라.)
//		TODO
//		setter, getter를 통해서 접근할 수 있다. 다만 세터같은 경우 조건을 설정해서 내가 원하는 조건값 안에서만 조정이 가능하게 만들 수 잇따.
		
		
		
		
//		문제 29. 캡슐화된 클래스에 접근하려면 어떤 것들이 필요한가?(2가지)
//		2가지를 class 내부에서 선언해줄 때 차이점이 무엇인가?
//		또 각각은 어떤 역할을 하는지 실제 메인에서 불러와 사용하면서 설명하라.
//		(진짜 중요한 내용이니까 잘 보고 넘어가자)
//		TODO
//		하나는 매개변수가 있고 없고의 차이?????????????????????????????????
//		겟터는 지금 해당 멤버변수의 값을 호출해주는 역할을 하고 세터는 해당 맴버변수의 값을 변경하는 역할을 한다.

		Number num = new Number();
		
		num.getNum();
		num.setNum(50);
		num.getNum();
		
		
		
//		문제 30. 위에 접근하기 위해 만든 2가지를 자동으로 만드는 방법은 무엇인가?
//		TODO
//		마우스 우클릭 소스에서 제너레이트 겟터세터 클릭해서 만들어주면 된다. 
		
		
		
		
		
//		문제 31. 멤버 변수에 해당하는 생성자를 자동으로 만들어주는 기능은 어떻게 사용하는가?
//		TODO
//		마찬가지로 소스에서 제너레이트 컨스트럭터를 눌러주면된다. 이때 디폴트생성자는 그냥 다 체크해제후 만들어주면 된다.
		
		
		
		
		
/////////////////////////////////////////////////여기까지가 class 03/////////////////////////////////////////////////////////////		
		
		
		
		
		
/////////////////////////////////////////////////여기부터가 class 04/////////////////////////////////////////////////////////////		
		
//		문제 32. 만약 멤버 변수의 이름과 생성자의 매개변수 이름이 같다면 어떤 일이 일어나는가?
//		TODO
//		멤버 변수의 값이 아닌 매개변수 내의 원소가 불러와진다.
		
		
		
		
		
		
		
//		문제 33. 그 문제를 해결하기 위해서 사용하는 예약어는 무엇인가?
//		TODO
//		변수이름 앞에 this. 을 붙혀준다.

		
		
		
		
		
//		문제 34. 메소드 체이닝이란 무엇인가? 그리고 어떤 메소드에 사용하면 좋은가?
//		TODO
//		자기자신을 리턴하여, 연이어 메소드 호출 가능케 하는 메소드 설계
//		setter같은 메소드에 활용하면 좋다.
		
		
		
		
		
//		문제 35. Number class를 만들고 2번 불러와라. 
//		이후 서로의 값을 4칙연산해줄 수 있게 만드는 메소드 체이닝에 해당하는 메소드를 제작하라.
//		이 후 4칙연산의 결과를 메인에서 출력하는데 이 때 반드시 각 연산은 메소드 체이닝을 통해 이뤄지게 만들어라.
//		(뭔지 모르면 바로 class04 열어서 봐)
//		TODO
		Number num1 = new Number();
		Number num2 = new Number();
		int n = num2.getNum();
		num2.setNum(50);
		int n1 = num1.getNum();
		System.out.println(n1);
		num1.chaining(n);
		System.out.println(num1.getNum());
		
		
//		문제 36. 4칙연산시 값을 메인으로 불러올 때 this의 값은 어디에 표기되는지 설명하라.
//		TODO
//		.앞에
		
		
		
		
		
//		문제 37. 맴버변수를 선언할 때 앞에 수식어를 아예 붙이지 않으면 public인가 private인가?
//		TODO
//		퍼블릭
		
		
		
		
/////////////////////////////////////////////////여기까지가 class 04/////////////////////////////////////////////////////////////		
		
		
		
		
		
		
/////////////////////////////////////////////////여기부터가 class 05/////////////////////////////////////////////////////////////		
		
		
		
		
		
		
		
		
		
		
		
/////////////////////////////////////////////////여기까지가 class 05/////////////////////////////////////////////////////////////		
		
		
		
		
		
		
		
/////////////////////////////////////////////////여기부터가 class 06/////////////////////////////////////////////////////////////		
		
		
		
		
		
		
		
		
		
		
/////////////////////////////////////////////////여기까지가 class 06/////////////////////////////////////////////////////////////		
		
		
		
		
		
		
	} // end main

} // end class
