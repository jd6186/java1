package com.lec.java.review_exam;

import java.util.Random;
import java.util.Scanner;

public class Review_exam_Main {
	public static void main(String[] args) {
//		문제 1. 메소드 기능은 파이썬에서 어떤 기능과 흡사한가?

//		TODO
//		함수
		
		
		
		
//		문제 1. 메소드란 무엇인가? 구성이 어떻게 되며 사용 방법은 무엇인가? 그리고 각 구성은 어떤 기능을 담당하는가?

//		TODO
//		빵틀이라면 생각하기 쉬울 것 같은데 지정한 매개변수를 통해 값을 받아 틀에 짜여진 답이 나오게 만드는 것을 메소드라고 한다.
//		구성은 수식어 리턴문 매개변수로 구성된다.
//		수식어 = 퍼블릭, 프라이빗을 정해 수정 범위를 설정하게 하고 static같은 메소드 에어리어 내에서 어떤 식으로 저장될 것인지 선택하는등의 결정을 내릴 수 있는 곳이다.
//		근데 수식어에 스테틱을 작성하지 않으면 기본값은 뭐로 저장되는거지???
		
		
		
//		문제 1. 메소드의 배치 위치는 어디인가?

//		TODO
//		클래스와 메인 사이
		
		
		
		
		
		
//		문제 1. 메소드 signature란 무엇을 의미하는가?

//		TODO
//		메소드 시그니처란 메소드 매개변수의 이름과 타입 순서를 작성한 것이다.
		
		
		
		
		
		
//		문제 1. 해당 메소드를 만들고 출력하라 (있어야 하는 위치에 작업함)
		
		// 메소드 이름 : sayHello
		// 매개변수 : name ()

//		TODO
		
		
		
		
		
		
		
		
		
//		문제 1. 해당 메소드를 만들고 출력하라
		
		// 메소드 이름 : sayAge
		// 매개변수 : int age
		// 리턴타입 : void (리턴값 없다.)

//		TODO
		
		
		
		
		
		
		
		
		
//		문제 1. 해당 메소드를 만들고 출력하라
		
		// 메소드 이름 : sayHello2 
		// 매개변수 : String name 이름
		//	        int age 나이
		// 리턴타입 : void (리턴값 없다.)

//		TODO
		
		
		
		
		
		
		
		
		
//		문제 1. 해당 메소드를 만들고 출력하라
		
		// 여러 메소드를 합치기
		// 위에서 만든 sayHello와 sayAge를 합쳐라

		
		SayHello("300억 부자 정동욱", 26);
		
		
//		TODO
		
		
		
		
		
		
		
//		문제 1. 메소드에 주석을 넣어라

//		TODO
		
		
		
		
		
		
//		문제 1. 단축키 
//		1) 메인 안에 출력하고 있는 메소드를 원본 위치를 한번에 가는 단축키(2가지 방식) :
//
//		TODO
//		f3누르거나 아니면 컨트롤 왼쪽마우스클릭
		
		
		
		
		
//		2) 원본 메소드가 어디서 호출되는지 원본에서 보는 단축키 :

//		TODO
//		컨+알+h
		
		
		
		
		
		
//		문제 1. 디버깅시 출력되고 있는 메소드 내부를 확인하고 싶을 때 누르는 것과 나올 때 누르는 것은?

//		TODO
//		step in, out, over
		
		
		
		
		
		
//		문제 1. 4칙연산 각각 메소드를 만들어서 출력해라.

//		TODO
		
		sum(8, 7);
		
		
		
		
		
		
//////////////////////////////////////////여기까지가 method 01, 02 내용 쉬워서 같이함/////////////////////////////////////////////		

		
		
		
		
//////////////////////////////////////////여기부터가 method 03/////////////////////////////////////////////		
		
//		문제 1. 메소드 연습
			/*
			 * 국어, 영어, 수학 점수를 입력 받아서
			 * 총점, 평균, 학점을 출력하는 프로그램
			 * 
			 * 총점, 평균, 학점을 구하는 각각의 메소드들을 작성하여 프로그램 완성하기
			 * 
			 *  [입력예]
			 *  78 98 57
			 *  
			 *  [출력예]
			 *  총점: 233
			 *  평균: 77.66666666666667
			 *  학점: C
			 */
			
			
			// calcTotal
			// 기능: 국어, 영어, 수학 점수를 입력 받아서 총점을 리턴하는 메소드
			// return: int
			// method name: calcTotal
			// arguments:
			//   1) int kor: 국어 점수
			//   2) int eng: 영어 점수
			//   3) int math: 수학 점수
			// TODO
			
			// calcAvg
			// 기능: 총점을 입력받아서 평균을 리턴하는 메소드
			// return: double
			// method name: calcAvg
			// arguments: int total - 총점
			// TODO
			
			// calcGrade
			// 기능: 평균을 받아서 등급을 리턴하는 메소드
			//      평균 90 이상이면 'A', 80 이상이면 'B', 70 이상이면 'C', 60 이상이면 'D'
			//      나머지는 'F' 리턴
			// return: char
			// method name: calcGrade
			// arguments: double avg - 평균
			// TODO
		
		
		
		
		
		
		
		
		
		
//////////////////////////////////////////여기까지가 method 03/////////////////////////////////////////////		
		
		
		
		
		
		
		
		
//////////////////////////////////////////여기부터가 method 06(04는 할거 없고 05는 06에 포함)/////////////////////////////////////////////	
		
//		문제 1. 오버로딩의 의미는?

//		TODO
//		오버로딩은 같은 이름의 메소드를 메소드 시그니처만 바꿔서 다양한 타입의 변수를 받아 자동현변이 이뤄지게 만들어 주는것.
		
		
		
		
		
		
//		문제 1. 오버로딩과 오버라이딩의 차이?

//		TODO
		
		
		
		
		
		
		
//		문제 1. 매개변수 리스트란 무엇을 의미하는가? 그리고 매개변수 리스트가 다른면 무엇이 가능한가?

//		TODO
		
		
		
		
		
		
		
		
//		문제 1. 
//		public static void ex(int num, String st); 와
//		public static void ex(String st, int num); 의 출력값은 같은가?

//		TODO
		
		
		
		
		
		
		
		
//		문제 1. 
//		public static void ex(int num, String st); 
//		public static void ex(String st, int num); 둘은 오버로딩이 가능한가???

//		TODO
		
		
		
		
		
		
		
		
//		문제 1. 오버로딩과 오버라이딩의 차이?
//		public static void ex(int num, String st); 
//		public static int ex(String st, int num); 둘은 오버로딩이 가능한가???

//		TODO
		
		
		
		
		
		
		
//		문제 1. 오버로딩의 장점을 println()의 성격을 통해 설명해라

//		TODO
		
		
		
		
		
		
		
//		문제 1. 오버로딩으로 출력 시 신경써야하는 부분은 무엇인가?(힌트는 영어에서 수의 일치와 비슷)

//		TODO
//		형변환되는 관계를 잘 신경써야된다.
		
		
		
		
		
//		문제 1. 실제 "sayNum" 이라는 메소드를 만들고  print처럼 모든 타입을 받을 수 있게 만들어라.(맨트는 알아서 생각해네)
//		(굉장히 디테일하게 뽑아줘야된다. 각타입 다 써서 만들어)

//		TODO
		
		
		
		
		
		
		
		
		
		
//////////////////////////////////////////여기까지가 method 06/////////////////////////////////////////////		
		
		
		
		
		
		
//////////////////////////////////////////여기부터가 method 07/////////////////////////////////////////////		
		
		
//		문제 1. Math 클래스의 메소드 종류를 나열하라.(5가지)

//		TODO
		double double1 = Math.PI;
		for (int i = 1; i <= 10; i++) {
			
			System.out.println(Math.random());
		}
		Math.round(3.5);
		System.out.println(Math.round(3.5));
		Math.floor(3.2);
		Math.ceil(2.9);
		
		
		
		
		
//		문제 1. Math 클래스의 메소드 종류별로 양수값과 음수값에 따라서 출력해봐라.

//		TODO
		
		
		
		
		
		
		
		
//		문제 1. Math.random과 Random객체의 차이점에 대해 설명하라.

//		TODO
		Random is = new Random();
//		정수를 부르냐 실수를 부르냐 차이징
		Scanner sc = new Scanner(System.in);
		
		
		
		
		
		
//		문제 1. Math.random과 Random 객체를 사용하여 0부터 3사이의 정수를 5번 출력하는 알고리즘을 각각 짜봐라.

//		TODO
		for(int i = 1; i<= 3; i++) {
			System.out.println(is.nextInt(4));
		}
		
		
		
		
		
		
		
//////////////////////////////////////////여기까지가 method 07/////////////////////////////////////////////		
		
		
		
		
		
//////////////////////////////////////////여기부터가 method 08/////////////////////////////////////////////		
/* 메소드 연습 : 컴퓨터 생각 맞추기 게임 
* 1. 메뉴를 보여주고
* 2. 사용자로부터의 입력을 받고
* 3. 컴퓨터의 생각(난수)와 비교 판정 내기
* 4. 사용자가 메뉴에서 '종료' 누르면 종료 시키기

[입력 예]		 
3

[출력 예]		 
<정상작동 시>
	 
컴퓨터 생각 맞추기 게임
----------------------
com의 생각을 맞춰보세요
1]
2]
3]
0] 종료
----------------------
선택 : 3
맞췄습니다.
----------------------
com의 생각을 맞춰보세요
1]
2]
3]
0] 종료
----------------------
선택 : 
		
		
		
<오작동시>		
컴퓨터 생각 맞추기 게임
----------------------
com의 생각을 맞춰보세요
1]
2]
3]
0] 종료
----------------------
선택 : 5
▼ 아래에 다시 입력하세요 ▼


// 아래에 숫자를 다시 입력하면 정상작동 처럼 나와야된다.(즉, 절대 안끝남 아래에 다시 입력하세요가 계속 떠야됌)
		
*/
		

		System.out.println("Rock! Scissor! Paper!");

//		TODO
		
		
		
		
		
		
		
		
		
		
		
//////////////////////////////////////////여기까지가 method 08/////////////////////////////////////////////		
		
		
		
		
		
//////////////////////////////////////////여기부터가 method 09/////////////////////////////////////////////		
		
//		문제 1. "Call By Value : 값에 의한 호출"  과     " Call By Reference : 참조에 의한 호출" 의 차이점에 대해 서술하라. 
//		특별히 이건 두개에 해당하는 메소드 출력문을 만들고나서  그림판으로 그리면서 설명 ㄱㄱ
//		설마~ 뭔뜻인지 모르면 바로 09가라 어차피 어려운 개념
		
//		TODO
//		스텍에 있는 값을 복사한 것에 연산을 하는 것과 주소값을 타고 들어가서 원본에 연산을 하는 차이가 있다.
//		여기서 스텍에 있는 것을 가져온 call by value에서는 원본값은 유지가 되지만 레퍼런스타입을 타고 원본을 수정하면 원본자체가 변하게 된다.
		
		
		
		
		
		
		
		
		
//////////////////////////////////////////여기까지가 method 09/////////////////////////////////////////////		
		
		
		
		
		
//////////////////////////////////////////여기부터가 method A/////////////////////////////////////////////		
		

//		문제 1. 메소드와 배열
//		10명의 학생의 국어점수를 배열로 정의하고 메소드로 총점, 평균, 최대값, 최소값을 구하라.
		
		
		
		System.out.println("매소드와 배열간의 관계");
//		문제 1. 메소드와 배열
//		배열안에 랜덤한 점수 10개를 받아라.
		int [] arr = new int[5];
		value(arr);
		
		
		
//////////////////////////////////////////여기까지가 method A/////////////////////////////////////////////	
		
		
		
		
		
		
//////////////////////////////////////////여기부터가 method B/////////////////////////////////////////////		
		
//		문제 1. 재귀호출이란 무엇인가?
//		메소드들 불러올 때 해당 메소드 안에서 자기 자신을 호출하는 문구를 넣은 메소드를 호출하는 것
		
				
//		문제 1. 재귀호출은 반드시 무엇이 있어야하며 재귀호출의 장단점은 무엇이 있는가?
//		반드시 종료시점이 있어야한다. 안그러면 바로 스텍오버플로우라는 스텍에서 저장할 수 있는 범위값을 초과해버렸다는 오류를 보게 된다.
		
		
		
//		문제 1. 재귀호출을 통해 1부터 100까지의 수가 출력되게 만들어라.
		System.out.println("재귀호출");
		jequi(1);
		
		
		
		
		
		
//		문제 1. 재귀호출에서 종료시점을 만들어주지 않으면 어떤 오류가 발생하는지 설명하시오.
//		스텍오버플로우
		
		
		
//		문제 1. 힙오버플로우를 발생시키는 방법에 대해 서술하시오.(특이한 예약어 사용필요)
		int x = Integer.MAX_VALUE;
		jacacibal(x);
		
		
		
//		문제 1. 재귀호출을 통해 10!을 게산하라.
		
		System.out.println("재귀호출");
		jacacibal(10);
		
		
		
		
//		문제 1. 음수팩토리얼은 가능한가??
//		불가능
		
//////////////////////////////////////////여기까지가 method B/////////////////////////////////////////////	
		
		
		
		
		
		
//////////////////////////////////////////여기부터가 method C/////////////////////////////////////////////		
		
		
//////////////////////////////////////////여기까지가 method C/////////////////////////////////////////////	
		
		
		
		
		
		
//////////////////////////////////////////여기부터가 method random/////////////////////////////////////////////		
		
		
//////////////////////////////////////////여기까지가 method random/////////////////////////////////////////////	
		
		
		
		
//////////////////////////////////////////여기부터가 method rockscissorpaper/////////////////////////////////////////////		
		
		
//////////////////////////////////////////여기까지가 methodrockscissorpaper/////////////////////////////////////////////	
		
		
		
		
		
	} // end main
	
	
	
	
	
	// 메소드 이름 : sayHello
	// 매개변수 : name ()

//	TODO
	public static void sayHello(String name) {
		System.out.println("제 이름은 " + name + "입니다.");
	}
			
			
			
			
			
			
			
			
//			문제 1. 해당 메소드를 만들고 출력하라
			
			// 메소드 이름 : sayAge
			// 매개변수 : int age
			// 리턴타입 : void (리턴값 없다.)

//			TODO
			
	public static void sayAge(int age) {
		System.out.println("제 나이는 " +  age + "입니다.");
	}
			
			
			
			
			
			
			
//			문제 1. 해당 메소드를 만들고 출력하라
			
			// 메소드 이름 : sayHello2 
			// 매개변수 : String name 이름
			//	        int age 나이
			// 리턴타입 : void (리턴값 없다.)

//			TODO
			
	public static void sayHello2(String name, int age) {
		System.out.println("제 이름은 " + name + "입니다.");
		System.out.println("제 나이는 " + age + "입니다.");
	}
			
			
			
			
			
			
			
//			문제 1. 해당 메소드를 만들고 출력하라
			
			// 여러 메소드를 합치기
			// 위에서 만든 sayHello와 sayAge를 합쳐라

//			TODO
	
	/**
	 * 메소드 이름 : SayHello
	 * @param name 이름
	 * @param age 나이
	 */
	public static void SayHello(String name, int age) {
		sayHello(name);
		sayAge(age);
	}
			
			
			

	
	
//	문제 1. 4칙연산 각각 메소드를 만들어서 출력해라.

//	TODO	
	public static void sum(int x, int y) {
		System.out.println(x + y);
	}
	public static void sub(int x, int y) {
		System.out.println(x - y);
	}
	public static void mul(int x, int y) {
		System.out.println(x * y);
	}
	public static void div(int x, int y) {
		System.out.println(x / y);
	}
			
	
	
	
	
	
	
	
	
	public static void value (int [] x){
		Random jex = new Random();
		for (int i = 0; i < x.length; i++) {
			x[i] = jex.nextInt(5);
			System.out.println(x[i]);
		}
	}
			

	
	
	
	public static int jequi(int i) {
		System.out.println(i);
		if(i < 100) {
			jequi(i+1);
		}else {
			System.out.println("재귀호출을 종료합니다.");
		}
		return i;
	}
	

	public static void jacacibal(int i) {
		while(i >= 1) {
			if(i >= 1) {
				if(i-1 == 0) {
					System.out.println(1);
					break;
				}
				System.out.println(i * (i - 1));
				jacacibal(i-1);
				
			}else {
				System.out.println("음수값 출력은 불가하여 재귀호출을 종료합니다.");
			}
			break;
		}
	}
	
	

	
	
	
	
	
	
	
	
} // end class
