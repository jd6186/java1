package com.lec.java.access_review;

import java.util.Calendar;
import java.util.Scanner;

import com.lec.java.access_only_review.Test02;

public class Review_Main {
	
	
	
	
	public static void test01() {
		System.out.println("스테틱쓰으~");
	}
	
	
	
	public void test02() {
		System.out.println("논-스테틱쓰으~");
	}
	
	Scanner sc = new Scanner(System.in);
	
	
	
	
	
	public static void main(String[] args) {
//		문제 1. 접근권한 수식어 4가지에 대해 나열하고 이것의 기능은 무엇이며 각각이 불러올 수 있는 범위를 나열하시오.
//		TODO
//		private default protected public
//		해당 클래스에서만 변경가능
//		같은 패키지 안에서는 변경 가능
//		같은 패키지 + 상속받은 것들은 변경가능
//		어디서든 가능
		
		
		
		
//		문제 1. 클래스의 접근제한자의 종류에 대해 설명하라. 2가지
//		TODO
//		퍼블릭 : 어디서든 출력가능
//		디폴트 : 해당 패키지 안에서만 가능한데 다른 패키지에서 가져오려고 하면 임폴트를 하는 곳에서부터 에러가 뜨기 때문에 메인에서 아무리 뭘 부르려해도 임포트 자체가 불가능하다.
		
		
		
		
		
		
		
		
		
//		문제 1. 같은 패키지 안에 Test01 클래스를 만들어라.
//		TODO
		
//		"인스턴스변수"!!!!!!는 이렇게 선언 
//		private int privateNum;
//		int defaultNum;
//		protected int protectedNum;
//		public int publicNum;
		
		
//		메소드는 이렇게 선언
//		private void privateMethod() { // 노란줄은 경고이다. - 안쓴건데 왜 이렇게 해놨냐
//			System.out.println("Test01 - private method");
//		}
//		
//		void defaultMethod() {
//			System.out.println("Test01 - defaul method");
//		}
//		
//		
//		protected void protectedMethod() {
//			System.out.println("Test01 - protected method");
//		}
//		
//		public void publicMethod() {
//			System.out.println("Test01 - public method");
//		}		
		
		
		
		
		
		
		
		
		
		
		
		
		
//		문제 1. only_review패키지 안에 Test02 클래스를 만들어라.
//		TODO
		
//		"인스턴스변수"!!!!!!는 이렇게 선언 
//		private int privateNum;
//		int defaultNum;
//		protected int protectedNum;
//		public int publicNum;
		
//		메소드는 이렇게 선언
//		private void privateMethod() { // 노란줄은 경고이다. - 안쓴건데 왜 이렇게 해놨냐
//			System.out.println("Test01 - private method");
//		}
//		
//		void defaultMethod() {
//			System.out.println("Test01 - defaul method");
//		}
//		
//		
//		protected void protectedMethod() {
//			System.out.println("Test01 - protected method");
//		}
//		
//		public void publicMethod() {
//			System.out.println("Test01 - public method");
//		}
		
		
		
//		문제 1. 만들었다면 test01과 test02를 출력했을 때 차이점에 대해 설명하시오.
//		test01은 무엇이 되고 test02는 무엇이 안되는지
//		TODO
		Test01 t1 = new Test01();
//		t1.privateMethod();
		t1.defaultMethod();
		t1.protectedMethod();
		t1.publicMethod();
		
		
		Test02 t2 = new Test02();
//		t2.privateMethod();
//		t2.defaultMethod();
//		t2.protectedMethod();
		t2.publicMethod();
		
		
//		문제 1. 클래스를 위와 같은 방식으로 출력한다면 default로 선언한 것과 public으로 선언한 것이 다른 결과로 나타나게 된다.
//		하지만 인스턴스변수나 클래스변수를 불러올 때 문제와 클래스를 불러올 때의 문제가 근본적으로 어디서 차이가 나는가???     // 존나 중요
//		TODO
//		다른 것들은 작성하는데 문제가 생기지만 다른 패키지에 있는 클래스들은 이 클래스 안으로 임폴트 할 때 문제가 생긴다.
	
		
		
//////////////////////////////////////////////////////여기까지 access05///////////////////////////////////////////////////////
		
		
//////////////////////////////////////////////////////여기부터 Final///////////////////////////////////////////////////////
		
//		문제 1. 맴버변수는 상수로 지정이 가능한가? 가능하다면 소문자로 표현되는가 대문자로 표현되는가? 
//		TODO
//		상수로 지정하고 클래스변수 또는 인스턴스 변수의 이름을 대문자로 지정해주는게 국룰이다.
		
		
//		문제 1. 문자열 전체를 대문자로 바꾸는 단추기와 소문자로 바꾸는 단축키에 대해 설명하라.
//		TODO
//		ctrl + shift + x는 대문자 y는 소문자~
		
		
//		문제 1. 지역변수에서 상수를 지정할 때와 클래스변수(인스턴스변수)에서 상수를 지정할 때의 가장 큰 차이점은 무엇인가?
//		TODO
//		메인 안에서 상수를 설정할 때는 변수 이름만 정하고 나중에 초기화를 진행해도 되는데 
//		클래스변수나 인스턴스변수에서 상수를 지정할 때 작성한 즉시 초기화를 진행해줘야 에러가 뜨지 않는다.
		
		
//////////////////////////////////////////////////////여기까지 Final///////////////////////////////////////////////////////
		
//////////////////////////////////////////////////////여기부터 Static01Main///////////////////////////////////////////////////////
		
//		문제 1. 클래스변수와 인스턴스변수의 차이점에 대해 설명하라.
//		TODO
//		스테틱이 있냐 없냐의 차이이다. 메소드도 이에 따라 클래스메소드와 인스턴스메소드로 나뉜다.
		
		
		
		
//		문제 1. 메인과 클래스 사이에 클래스메소드와 인스턴스 메소드를 둘다 선언해라.
//		이 때 스캐너까지 추가로 작성하고 스캐너는 무슨 변수가 되는지 작성해라.
//		TODO
//		스캐너는 인스턴스 변수
		
		
		
		
		
//		문제 1. 스테틱으로 선언된 메인안에 논스테틱메소드 사용이 가능한가?
//		TODO
//		불가능하다.
		
		
		
		
		
//		문제 1. 불가능하다면 어떻게 써야되는가??  -  틀린 문제
//		TODO
//		무언가를 불러올 수 있는 구문을 만들어서 써야된다.
//		그건!!!!
//		지금 여기 해당 클래스 이름 + 변수 이름  = new + 지금 여기 해당 클래스 이름();
//		이렇게 정의를 해주면 값을 불러올 수 있다. 왜?
//		클래스는 메인보다 상위개념이고 클래스와 메인 사이에 작성된 구문들이기 때문에 이 해당클래스를 불러다 놓고 
//		그 안에 작성하면 클래스 안에서 호출되는 것이기 때문에 가능하다.
		
		
//		문제 1. 위에 방법을 이용하여 인스턴스변수와 스캐너변수를 둘다 메인에서 나타나게 작성하라.
//		TODO
		test01();
//		test02();
//		int n = sc.nextInt();
		// 이건 에러지만
		
		
		Review_Main re = new Review_Main();
//		이렇게 클래스를 불러오고
		re.test02();
		re.sc.nextInt();
//		이건 에러가 안뜬다.
		
		
		
		
		
		
//		문제 1. 메인에서 작성한 스캐너와 인스턴스변수로 작성한 스캐너의 차이점에 대해 설명하라.
//		TODO
//		메인에서 스캐너를 불러왔으면 이미 메인 메소드안에서 정의될 수 있게 임포트 되지만 메소드 밖에서 정의해버리면 불가능하다는 것을 알 수 있다.
//////////////////////////////////////////////////////여기까지 Static01Main///////////////////////////////////////////////////////
		
//////////////////////////////////////////////////////여기부터 Static02Main///////////////////////////////////////////////////////
		
//		문제 1. 클래스 변수를 선언한 test클래스를 하나 만들어라.
//		멤버변수는 인트타입으로 인스턴스변수와 클래스변수 각각 1개씩 만들어라.
		
//		클래스의 메소드는 
//		show(); // 인스턴스 매소드 
//		show2(); // 클래스 매소드 
//		두가지를 만들어라.
//		이 때 각각의 메소드는 
//		System.out.println(클래스변수 출력);
//		System.out.println(인스턴스변수 출력);
//		을 포함하게 만들어라.
		
//		이 때 어디서 애러가 나는가? 
//		TODO
//		static 메소드는 논스테틱 변수를 받을 수 없다. 즉, 인스턴스 변수를 받을 수 없다.
		
		
		
		
		
		
//		문제 1. 이 후 show()와 show2()메소드를 메인으로 불러와라.
//		TODO
		Test tt1 = new Test();
		tt1.number = 150;
		tt1.num = 100;
		tt1.show01();
		tt1.show02();
		Test tt2 = new Test();
		tt2.number = 200;
		tt2.show01();
		tt2.show02();
		// 지금은 이렇게 tt2.number같은 짓을 했지만 원래는 그냥 클래스이름.변수로 해줘야된다.
		Test.number = 100; 
		tt2.show02();
//		이런식으로
		
		
		
//		문제 1. 각각 인스턴스 변수와 클래스 변수를 출력하도록 하라. 이 때 '클래스 변수'의 값만 특정하여 지정해줘라.
//		TODO
//		위에 함
		
		
		
		
		
//		문제 1. show2()의 클래스 변수값을 지정하고 출력하였다면 다시 show()을 그냥 출력해봐라! 무슨 일이 일어났는가?
//		TODO
//		위에
		
		
		
		
		
//		문제 1. 왜 저런 일이 일어났는지 설명하라.
//		TODO
//		static으로 지정된 값은 클래스 당 단 1개만 저장된다. Method Area 저장되게 된다. 
//		이 때 객체보다 스테틱이 상위 개념이기 때문에 객체를 아무리 늘려도 상위개념에 있는 값은 변하지 않는다.
//		그래서 아무리 다른 객체를 만들어서 스테틱을 불러와도 같은 값만이 나오게 되는 것이다.
		
		
		
		
		
//		문제 1. 이 특성을 활용해 Test라는 클래스의 인스턴스가 생겨날 때 마다 클래스변수의 값이 1씩 증가하게 만들어라.
//		TODO
//		위에함(Car랑 Hybird 안에 보면 했음)
		
		
		
		
		
		
//		문제 1. 클래스변수나 인스턴스변수를 메인에서 직접사용할 때 주의해야 될 것은 무엇인가?
//		TODO
//		레퍼런스변수를 통해 직접적으로 멤버변수들을 변경하는 것은 위험하다.
//		따라서 해당 "클래스.멤버변수" 양식을 통해 값을 변경하는 것이 안전하다.

		
		
		
		
//		문제 1. 스테틱의 특징 3가지는 무엇인가?
//		TODO
//		단 한개의 값만을 가진다.
//		객체보다 상위의 개념으로서 다른 객체를 만들고 스테틱 변수를 불러오면 결국 같은값이 도출된다
//		스테틱은 논 스테틱을 변수로 가질 수 없다.
//		인스턴스 생성없이도 인스턴스를 불러오게 하는것이 가능하다.
		
		
		
		
		
//////////////////////////////////////여기까지가 Static 02 /////////////////////////////////////////////////////
		
		
		
		
//////////////////////////////////////여기부터가 Static 03 /////////////////////////////////////////////////////
//		문제 1. Singleton 싱글톤 디자인 패턴은 무엇을 뜻하는가?
//		TODO
//		인스턴스를 최대 1개까지만 유지해야하는 설계
		
		
//		문제 1. 싱글톤 디자인 패턴을 만들 때 변수와 생성자는 무엇으로 수식어를 다는가?
//		TODO
//		private
		
		
//		문제 1. 그럼 무엇과 무엇을 활용해 메인으로 클래스의 값이 불려올 수 있게 만드는가?(2가지 중요사항)
//		TODO
//		스테틱과 & getInstance
		
		
		System.out.println();
//		문제 1. Tests라는 싱글톤디자인패턴을 활용한 클래스를 만들고 맴버변수, 생성자를 다 지정해준 뒤 getInstance라는 메소드를 만들고 이걸 통해 메인에서 테스트 클래스의 값이 불려오게 만들어라.
//		TODO
		System.out.println("▼ Getter&Setter ▼");
		Tests ttt1 = Tests.getInstance();
		
		
//		문제 1. 전에 배운 내용을 통해 Test내에 2가지 메소드를 만들어서 인스턴스 변수를 100으로 바꾸고 출력해줘라.
//		TODO
		ttt1.setNum(5);
		ttt1.getNum();
//		문제 1. 싱글톤의 예로 Object에서 불러올 수 있는 메소드를 만들고(이름 안알려줄거지롱~) 메인에서 출력해라.
//		TODO
//		Calendar cal = new Calendar();
		// 이건 스테틱이라 불가능
		Calendar cal = Calendar.getInstance();
//		항상 싱글톤으로 작업된 클래스는 이렇게 불러와라.
		
		
		
//////////////////////////////////////여기까지가 Static 03 /////////////////////////////////////////////////////

	
	} // end main
} // end class
