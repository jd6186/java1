package com.lec.java.review_oop;


public class Review_OOP {

	public static void main(String[] args) {
		
//		문제 1. 다형성이란 무엇인가??
//		TODO
//		조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조가능한것
//		조상클래스 타입의 참조변수로 자소늘래스의 인스턴스를 참조가능한것.
		
		
//		문제 1. Vehicle, Car, HybridCar를 클래스로 정의하여라. 순서대로 오버라이딩 시켜(알지? displayInfo) > 근데 이 때 super로 하지말고 그냥 오버라이딩 시켜서 해봐 어떤식으로 작동하는지 눈으로봐 모르면 바로 01열어서 보고
//		TODO
//		완료
		
		
		
//		문제 1. Vehicle v1 = new Vehicle();  여기서 v1타입은 무엇이며 어떤 타입을 받는가?
//		TODO
//		Vehicle이 타입으로 들어가고 new Vehicle의 타입을 새로 받는다.
		
		
		
		
//		문제 1. 각 클래스들을 다 인스턴스 시키고 displayInfo()를 불러와라.
//		TODO
		Vehicle v1 = new Vehicle();
		Car c1 = new Car();
		Hybrid h1 = new Hybrid();
		
		v1.displayInfo();
		System.out.println();
		c1.displayInfo();
		System.out.println();
		h1.displayInfo();
		
		
		
		
//		문제 1. 조상을 통해 새로운 Car와 Hybrid를 인스턴스 시켜봐라  가능한가?가능하다면 왜 가능한가?(객체 지향언어 시점에서 설명 ㄱ, 어떤 특성이 들어난 것인가? 모르면 바로 01번 봐라)
//		TODO
		Vehicle v2 = new Car();
		Vehicle v3 = new Hybrid();
		Vehicle v4 = new Vehicle();		
		
		
		
//		문제 1. 그럼 자손클래스도 부모클래스에 대입이 가능한가?
//		TODO
//		불가능하다 그건 int에 long을 대입하는격이야 말도 안되징
		
		
		
		
//		문제 1. 상속은 왜 사용하는 것인가?
//		TODO
//		중복 코딩을 하지 않게 하며 유지보수의 효율성을 높일 수 있다.
		
		
//		문제 1. 상속관계로 정의할지 멤버관계로 정의할지 어떤 원리를 통해 판단할 수 있는가?
//		TODO
//		IS-A 관계인지 HAS-A 관계인지 판단한다.
//		IS-A 관계란 일방적인 관계로서 탈것이면 자동차이다는 성립하지 않지많 자동차이면 탈것이다는 성립하는 이런 관계가 상속관계이당
//		HAS-A 관계란 자동차라면 타이어다, 타이어는 자동차다라는 것은 성립하지 않아도  타이어는 자동차에 속한다. 자동차는 타이어에 속한다. 이런 것들이 걸리는게 HAS-A 개념이다.
		
		
		
/////////////////////////////////////////////////////////////여기까지가 oop01////////////////////////////////////////////////////		
		
		
		
		
		
		
/////////////////////////////////////////////////////////////여기부터가 oop02////////////////////////////////////////////////////		
//		문제 1. 자 그럼 다형성을 활용해 Vehicle을 원소 3개를 가지는 배열로 바꾸고 각 클래스를 새로 인스턴스 시키는 배열을 만들어보라.
//		TODO
		Vehicle [] vv = new Vehicle[3];
		vv[0] = new Vehicle();
		vv[1] = new Car();
		vv[2] = new Hybrid();
		
		
		
		
		System.out.println("여기서부터 배열로 출력하는 내용");
		System.out.println();
//		문제 1. 해당 클래스들을 한번에 인스턴스시키면서 displayInfo를 출력하는 구문을 만들어라. (기가 맥히지? 지렸지?)
//		TODO
		for (int i = 0; i < vv.length; i++) {
			vv[i].displayInfo();
		}
		
		
//		문제 1. System.out.println(car[i]); 이런식으로 위에 클래스들이 속한 배열을 출력하면 뭐가 어떤식으로 출력되는가?
//		TODO
//		주소들이 각각이 어디에 해당하는지 나오면서 출력된다. Car인지 Vehicle인지 뭔지
		
		
		
		
//		문제 1. 해당 메인 밑에 메소드를 하나 만들고(자동차 관련기능) 해당 메소드의 매개변수를 Vehicle로 설정하고 메인에서 각 차종별로 전부 이 메소드를 사용하게 해봐라
//		TODO
		driving(v1);
		driving(v2);
		driving(v3);
		
		
		
//		문제 1. 지렸지? 즉, 부모클래스를 잘 만들어두면 배열공유 메소드공유 등 다양한걸 그냥 부모클래스에 걸어서 다 쓸수 있어 개사기~
//		TODO
		
		
//		문제 1. 변수로 클래스를 받으면 뭘 할 수 있는가?
//		TODO
//		변수로 클래스를 받으면 변수.클래스내 메소드사용 이 가능하다.
		
//		문제 1. 메소드의 리턴문으로 클래스를 받으면 뭘 할 수 있는가?
//		TODO
//		출력되는 것의 타입을 다른 클래스로 바꿔서 호출 할 수 있다.
		
		
		
/////////////////////////////////////////////////////////////여기까지가 oop02////////////////////////////////////////////////////		
		
		
		
		
		
		
/////////////////////////////////////////////////////////////여기부터가 oop03////////////////////////////////////////////////////		
		
		
/////////////////////////////////////////////////////////////여기까지가 oop03////////////////////////////////////////////////////		
		
		
		
		
		
/////////////////////////////////////////////////////////////여기부터가 oop04////////////////////////////////////////////////////		
		
		
/////////////////////////////////////////////////////////////여기까지가 oop04////////////////////////////////////////////////////	
		
		
		
		
		
		
/////////////////////////////////////////////////////////////여기부터가 oop05////////////////////////////////////////////////////		
		
		
/////////////////////////////////////////////////////////////여기까지가 oop05////////////////////////////////////////////////////		
		
		
		
		
		
/////////////////////////////////////////////////////////////여기부터가 oop06////////////////////////////////////////////////////		
		
		
/////////////////////////////////////////////////////////////여기까지가 oop06////////////////////////////////////////////////////		
		
		
		
		
		
		
		
		
/////////////////////////////////////////////////////////////여기부터가 oop07////////////////////////////////////////////////////		
		
		
/////////////////////////////////////////////////////////////여기까지가 oop07////////////////////////////////////////////////////		

		
		
		
		
		
		
		
	} // end main
	
	public static void driving(Vehicle v) { // 이렇게 변수로 클래스를 받을 때는 스테틱으로 받아줘라.
		System.out.println(v.getSpeed());
	}
	
	
	
} // end class
